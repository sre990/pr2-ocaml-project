(* some int Items*)
let i0 = CstInt(0);;
let i1 = CstInt(1);;
let i2 = CstInt(-2);;
let i3 = CstInt(3);;
let i4 = CstInt(100);;
(* some float Items*)
let f0 = CstFloat(0.);;
let f1 = CstFloat(1.);;
let f2 = CstFloat(-2.);;
let f3 = CstFloat(3.);;
let f4 = CstFloat(100.);;
(* some boolean Items *)
let b0 = CstFalse;;
let b1 = CstTrue;;
(* some string Items*)
let s0 = CstString("");;
let s1 = CstString("aaaa");;
let s2 = CstString("bbb");;
let s3 = CstString("123456789");;

print_string "testing set constructors: ";;
print_string "Set 0: ";;
let set0 = Empty(TFloat);;
typecheck set0 tEmptyEnv;;
print_string "Set 1: ";;
let set1 = Singleton(i3);;
typecheck set1 tEmptyEnv;;
print_string "Set 2: ";;
let set2 = OfOpt(TBool, Empty);;
typecheck set2 tEmptyEnv;;
print_string "Set 3: ";;
let set3 = OfOpt(TInt,Empty);;
typecheck set3 tEmptyEnv;;
print_string "Set 6: ";;
let set6 = Singleton(f3);;
typecheck set6 tEmptyEnv;;
print_string "Set 7: ";;
let set7 = Singleton(s3);;
typecheck set7 tEmptyEnv;;
print_string "Set 8: ";;
let set8 = Singleton(b0);;
typecheck set8 tEmptyEnv;;
print_string "Set 9: ";;
let set9 = OfOpt(TInt,
                Item(i0,Item(i1,Item(i2,Item(i3,Item(i4,Empty))))));;
typecheck set9 tEmptyEnv;;  
print_string "Set 10: ";;                
let set10 = OfOpt(TInt, Item(i0,Empty)) ;;
typecheck set10 tEmptyEnv;;
print_string "Set 11: ";;
let set11 = Singleton(i0) ;;
typecheck set11 tEmptyEnv;;
print_string "testing if Set 10 and 11 are different: ";;
let b = set10<>set11;;
(typecheck (set10) tEmptyEnv)<>(typecheck (set11) tEmptyEnv);;

print_string "testing operations for integers: ";;
print_string "testing the sum: ";;
let op0 = Sum(i3,i2);;
typecheck op0 tEmptyEnv;;
print_string "testing the subtraction: ";;
let op1 = Sub(i0,i2);;
typecheck op1 tEmptyEnv;;
print_string "testing the negation: ";;
let op3 = Neg(i2);;
typecheck op3 tEmptyEnv;;
print_string "testing the multiplication: ";;
let op4 = Times(i2,i4);;
typecheck op4 tEmptyEnv;;
print_string "testing the division: ";;
let op5 = Div(i4,Neg(i2));;
typecheck op5 tEmptyEnv;;
print_string "testing the equality: ";;
let op6 = Eq(i0,i0);;
typecheck op6 tEmptyEnv;;
let op7 = Eq(i0,i3);;
typecheck op7 tEmptyEnv;;
print_string "testing < and >: ";;
let op8 = BiggerThan(i2,i0);;
typecheck op8 tEmptyEnv;;
let op9 = BiggerThan(i0,i2);;
typecheck op9 tEmptyEnv;;
let op1 = LessThan(i0,i2);;
typecheck op1 tEmptyEnv;;
print_string "testing IsZero: ";;
let op2 = IsZero(i0);;
typecheck op2 tEmptyEnv;;
let op3 = IsZero(i1);;
typecheck op3 tEmptyEnv;;
print_string "testing the modulus: ";;
let op0 = Mod(i4,i3);;
typecheck op0 tEmptyEnv;;
print_string "testing operations for floats: ";;
print_string "testing the sum: ";;
let op0 = Sum(f3,f2);;
typecheck op0 tEmptyEnv;;
print_string "testing the subtraction: ";;
let op1 = Sub(f0,f2);;
typecheck op1 tEmptyEnv;;
print_string "testing the negation: ";;
let op3 = Neg(f2);;
typecheck op3 tEmptyEnv;;
print_string "testing the multiplication: ";;
let op4 = Times(f2,f4);;
typecheck op4 tEmptyEnv;;
print_string "testing the division: ";;
let op5 = Div(f4,Neg(f2));;
typecheck op5 tEmptyEnv;;
print_string "testing the equality: ";;
let op6 = Eq(f0,f0);;
typecheck op6 tEmptyEnv;;
let op7 = Eq(f0,f3);;
typecheck op7 tEmptyEnv;;
print_string "testing < and >: ";;
let op8 = BiggerThan(f2,f0);;
typecheck op8 tEmptyEnv;;
let op9 = BiggerThan(f0,f2);;
typecheck op9 tEmptyEnv;;
let op1 = LessThan(f0,f2);;
typecheck op1 tEmptyEnv;;

print_string "testing operations for booleans: ";;
print_string "testing the negation: ";;
let op0 = Not(b1);;
typecheck op0 tEmptyEnv;;
print_string "testing the and: ";;
let op1 = And(op0, b1);;
typecheck op1 tEmptyEnv;;
print_string "testing the and the negation: ";;
let op2 = And(Not(op1), b1);;
typecheck op2 tEmptyEnv;;
print_string "testing the or: ";;
let op3 = Or(op0, b0);;
typecheck op3 tEmptyEnv;;

print_string "testing operations for strings: ";;
print_string "testing the equality: ";;
let op0 = Eq(s1,s1);;
typecheck op0 tEmptyEnv;;
let op1 = Eq(s1, s0);;
typecheck op1 tEmptyEnv;;
print_string "testing < and >: ";;
let op2 = BiggerThan(s2, s1);;
typecheck op2 tEmptyEnv;;
let op3 = BiggerThan(s1, s2);;
typecheck op3 tEmptyEnv;;
let op4 = LessThan(s0,s2);;
typecheck op4 tEmptyEnv;;
let op5 = LessThan(s2,s0);;
typecheck op5 tEmptyEnv;;
let op6 = LessThan(s0,s0);;
typecheck op6 tEmptyEnv;;
print_string "testing the concatenation: ";;
let op7 = Concat(s1,s2);;
typecheck op7 tEmptyEnv;;
let op8 = Concat(op7,s3);;
typecheck op8 tEmptyEnv;;

print_string "testing operations for sets: ";;
print_string "testing the union: ";;
let op1 = Union(set9, Add(Add(set1,CstInt(189)), CstInt(22)));;
typecheck op1 tEmptyEnv;;
let op2 = Union(set3, set1);;
typecheck op2 tEmptyEnv;;
let op3 = Union(set6, set0);;
typecheck op3 tEmptyEnv;;
print_string "testing the intersection: ";;
let op4 = Intersection(set0,set6);;
typecheck op4 tEmptyEnv;;
let op5 = Intersection(set6,set0);;
typecheck op5 tEmptyEnv;;
let op6 = Intersection(set9, Add(Add(set10, i3), CstInt(22)));;
typecheck op6 tEmptyEnv;;
let op7 = Intersection(set8,set8);;
typecheck op7 tEmptyEnv;;
let op8 = Intersection(set9,set11);;
typecheck op8 tEmptyEnv;;
print_string "testing the difference: ";;
let op8 = Difference(set9,set11);;
typecheck op8 tEmptyEnv;;
let op9 = Difference(set6,set0);;
typecheck op9 tEmptyEnv;;
let op1 = Difference(set0,set6);;
typecheck op1 tEmptyEnv;;
print_string "testing the insertion: ";;
let op2 = Add(set7, s2);;
typecheck op2 tEmptyEnv;;
let op3 = Add(set9, CstInt(77));;
typecheck op3 tEmptyEnv;;
let op5 = Add(set0,f1);;
typecheck op5 tEmptyEnv;;
print_string "testing the removal: ";;
let op2 = Remove(set7, s3);;
typecheck op2 tEmptyEnv;;
let op3 = Remove(set9, i4);;
typecheck op3 tEmptyEnv;;
print_string "testing the minimum and maximum: ";;
let op0 = GetMin(set9);;
typecheck op0 tEmptyEnv;;
let op1 = GetMax(set9);;
typecheck op1 tEmptyEnv;;
let op2 = GetMin(set0);;
typecheck op2 tEmptyEnv;;
let op3 = GetMax(set0);;
typecheck op3 tEmptyEnv;;
let op4 = GetMin(set1);;
typecheck op4 tEmptyEnv;;
let op5 = GetMax(set1);;
typecheck op5 tEmptyEnv;;
print_string "testing IsEmpty: ";;
let op0 = IsEmpty(set0);;
typecheck op0 tEmptyEnv;;
let op1 = IsEmpty(set9);;
typecheck op1 tEmptyEnv;;
print_string "testing IsInside: ";;
let op0 = IsInside((Empty(TString), s0));;
typecheck op0 tEmptyEnv;;
let op1 = IsInside(set9, i0);;
typecheck op1 tEmptyEnv;;
let op2 = IsInside(set9, CstInt(33));;
typecheck op2 tEmptyEnv;;
print_string "testing IsSubset: ";;
let op0 = IsSubset(set0, set0);;
typecheck op0 tEmptyEnv;;
let op3 = IsSubset(Empty(TInt),set9);;
typecheck op3 tEmptyEnv;;
let op4 = IsSubset((Add(Empty(TInt),CstInt 0)),set9);;
typecheck op4 tEmptyEnv;;
let op5 = IsSubset(set1, set9);;
typecheck op5 tEmptyEnv;;
let op6 = IsSubset(set9, set1);;
typecheck op6 tEmptyEnv;;

print_string "testing functions: ";;
print_string "testing recursion by implementig the factorial function: ";;
let fact = Letrec("fact", "x",TInt,TInt,   
             Ifthenelse(Eq(Den("x"), CstInt(0)), CstInt(1), Times(Den("x"),
                        Apply(Den("fact"), Sub(Den("x"), CstInt(1))))), 
                        Apply(Den("fact"), CstInt(3)));;
typecheck fact tEmptyEnv;;
(* tests with pred = even, with pred = odd  and finally with pred = neg*)
let pred_even = Fun("x",TInt,Ifthenelse(Eq(Mod(Den("x"),
               CstInt(2)),CstInt(0)),CstTrue,CstFalse));;
let pred_odd = Fun("x",TInt,Ifthenelse(Not(Eq(Mod(Den("x"),
              CstInt(2)),CstInt(0))),CstTrue,CstFalse));;
let pred_neg = Fun("x", TInt, Neg(Den("x")))

let make_even = Fun("x",TInt,Times(Den("x"),CstInt(2)));;
print_string "testing ForAll: ";;
let forall_even=ForAll(pred_even,set9);;
typecheck forall_even tEmptyEnv;;
let forall_odd=ForAll(pred_odd,set9);;
typecheck forall_odd tEmptyEnv;;
let forall_odd=ForAll(pred_odd,set1);;
typecheck forall_odd tEmptyEnv;;
print_string "testing Exists: ";; 
let exists_even=Exists(pred_even,set9);;
typecheck exists_even tEmptyEnv;;
let exists_odd=Exists(pred_odd,set9);;
typecheck exists_odd tEmptyEnv;;
let exists_even=Exists(pred_even,set1);;
typecheck exists_even tEmptyEnv;;
print_string "testing Filter: ";;
let filter_even=Filter(pred_even,set9);;
let filter_odd=Filter(pred_odd,set9);;
typecheck filter_even tEmptyEnv;;
typecheck filter_odd tEmptyEnv;;
print_string "testing Map: ";;
let map_make_even=Map(make_even,set9);;
typecheck map_make_even tEmptyEnv;;
let str = OfOpt(TString,Item(CstString("0:"),
Item(CstString("1:"),Item(CstString("2:"),
Item(CstString("3:"),Item(CstString("4:"),Empty))))));;
let pred_concat = Fun("x", TString, Concat(Den("x"), s1)) ;;
let map_concat= Map(pred_concat,str);;
typecheck map_concat tEmptyEnv;;
print_string "the mapping function can change types of the resulting set: ";;
let map_turn_to_one = Map(Fun("x", TInt,CstInt(1)), set7) ;;
typecheck map_turn_to_one tEmptyEnv ;;
let map_neg = Map(pred_neg, set9);;
typecheck map_neg tEmptyEnv ;;

print_string "------------------------------------------------------------";;
print_string "testing failures: ";;
print_string "testing type mismatch: ";;
print_string "Set 4: ";;
let set4 = OfOpt(TInt,
                Item(f0,Item(i1,Item(i0,Item(i2,Item(i3,Empty))))));;
typecheck set4 tEmptyEnv;;
print_string "on the union: ";;                  
let op0 = Union(set0,set1);;
typecheck op0 tEmptyEnv;;
print_string "on the insertion: ";;                  
let op4 = Add(set7,b0);;
typecheck op4 tEmptyEnv;;
print_string "on IsInside: ";;                  
let op3 = IsInside(set9, b1);;
typecheck op3 tEmptyEnv;;
print_string "on IsSubset: ";;                  
let op1 = IsSubset(set9, set0);;
typecheck op1 tEmptyEnv;;
let op2 = IsSubset(set0, set9);;
typecheck op2 tEmptyEnv;;
print_string "testing set consistency: ";;
print_string "on the insertion: ";;  
let op5 = Add(set9,Empty(TInt));;
typecheck op5 tEmptyEnv;;
print_string "testing if the predicate is a boolean: ";;
print_string "on the ForAll: ";;   
let forall_failure = ForAll(pred_neg, set9);;
typecheck forall_failure tEmptyEnv;;
print_string "on the Exists: ";; 
let exists_failure = Exists(pred_neg, set9);;
typecheck exists_failure tEmptyEnv ;;     
print_string "on the Filter: ";;  
let filter_failure = Filter(pred_neg, set9);;
typecheck filter_failure tEmptyEnv ;;        
print_string "testing if the pred in f(pred,set) is actually a predicate: ";;
   print_string "on the ForAll: ";;   
let forall_failure = ForAll(CstInt(3), set9);;
typecheck forall_failure tEmptyEnv;;
print_string "on the Exists: ";; 
let exists_failure = Exists(CstInt(3), set9);;
typecheck exists_failure tEmptyEnv ;;     
print_string "on the Filter: ";;  
let filter_failure = Filter(CstInt(3), set9);;
typecheck filter_failure tEmptyEnv ;;  
print_string "on the Map: ";;  
let pred_map_failure = Map(CstInt(3),set9) ;;
typecheck pred_map_failure tEmptyEnv;;           
