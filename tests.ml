(* some int Items*)
let i0 = CstInt(0);;
let i1 = CstInt(1);;
let i2 = CstInt(-2);;
let i3 = CstInt(3);;
let i4 = CstInt(100);;
(* some float Items*)
let f0 = CstFloat(0.);;
let f1 = CstFloat(1.);;
let f2 = CstFloat(-2.);;
let f3 = CstFloat(3.);;
let f4 = CstFloat(100.);;
(* some boolean Items *)
let b0 = CstFalse;;
let b1 = CstTrue;;
(* some string Items*)
let s0 = CstString("");;
let s1 = CstString("aaaa");;
let s2 = CstString("bbb");;
let s3 = CstString("123456789");;

print_string "testing set constructors: ";;
print_string "Set 0: ";;
let set0 = Empty(Float);;
eval set0 emptyEnv;;
print_string "Set 1: ";;
let set1 = Singleton(i3);;
eval set1 emptyEnv;;
print_string "Set 2: ";;
let set2 = Of(Bool, []);;
eval set2 emptyEnv;;
print_string "Set 3: ";;
let set3 = Of(Int,[]);;
eval set3 emptyEnv;;
print_string "Set 6: ";;
let set6 = Singleton(f3);;
eval set6 emptyEnv;;
print_string "Set 7: ";;
let set7 = Singleton(s3);;
eval set7 emptyEnv;;
print_string "Set 8: ";;
let set8 = Singleton(b0);;
eval set8 emptyEnv;;
print_string "Set 9: ";;
let set9 = Of(Int,[i0;i1;i2;i3;i4]);;
eval set9 emptyEnv;;  
print_string "Set 10: ";;                
let set10 = Of(Int, [i0]) ;;
eval set10 emptyEnv;;
print_string "Set 11: ";;
let set11 = Singleton(i0) ;;
eval set11 emptyEnv;;
print_string "testing if Set 10 and 11 are different: ";;
let b = set10<>set11;;
(eval (set10) emptyEnv)<>(eval (set11) emptyEnv);;

print_string "testing operations for integers: ";;
print_string "testing the sum: ";;
let op0 = Sum(i3,i2);;
eval op0 emptyEnv;;
print_string "testing the subtraction: ";;
let op1 = Sub(i0,i2);;
eval op1 emptyEnv;;
print_string "testing the negation: ";;
let op3 = Neg(i2);;
eval op3 emptyEnv;;
print_string "testing the multiplication: ";;
let op4 = Times(i2,i4);;
eval op4 emptyEnv;;
print_string "testing the division: ";;
let op5 = Div(i4,Neg(i2));;
eval op5 emptyEnv;;
print_string "testing the equality: ";;
let op6 = Eq(i0,i0);;
eval op6 emptyEnv;;
let op7 = Eq(i0,i3);;
eval op7 emptyEnv;;
print_string "testing < and >: ";;
let op8 = BiggerThan(i2,i0);;
eval op8 emptyEnv;;
let op9 = BiggerThan(i0,i2);;
eval op9 emptyEnv;;
let op1 = LessThan(i0,i2);;
eval op1 emptyEnv;;
print_string "testing IsZero: ";;
let op2 = IsZero(i0);;
eval op2 emptyEnv;;
let op3 = IsZero(i1);;
eval op3 emptyEnv;;
print_string "testing the modulus: ";;
let op0 = Mod(i4,i3);;
eval op0 emptyEnv;;
print_string "testing operations for floats: ";;
print_string "testing the sum: ";;
let op0 = Sum(f3,f2);;
eval op0 emptyEnv;;
print_string "testing the subtraction: ";;
let op1 = Sub(f0,f2);;
eval op1 emptyEnv;;
print_string "testing the negation: ";;
let op3 = Neg(f2);;
eval op3 emptyEnv;;
print_string "testing the multiplication: ";;
let op4 = Times(f2,f4);;
eval op4 emptyEnv;;
print_string "testing the division: ";;
let op5 = Div(f4,Neg(f2));;
eval op5 emptyEnv;;
print_string "testing the equality: ";;
let op6 = Eq(f0,f0);;
eval op6 emptyEnv;;
let op7 = Eq(f0,f3);;
eval op7 emptyEnv;;
print_string "testing < and >: ";;
let op8 = BiggerThan(f2,f0);;
eval op8 emptyEnv;;
let op9 = BiggerThan(f0,f2);;
eval op9 emptyEnv;;
let op1 = LessThan(f0,f2);;
eval op1 emptyEnv;;

print_string "testing operations for booleans: ";;
print_string "testing the negation: ";;
let op0 = Not(b1);;
eval op0 emptyEnv;;
print_string "testing the and: ";;
let op1 = And(op0, b1);;
eval op1 emptyEnv;;
print_string "testing the and the negation: ";;
let op2 = And(Not(op1), b1);;
eval op2 emptyEnv;;
print_string "testing the or: ";;
let op3 = Or(op0, b0);;
eval op3 emptyEnv;;

print_string "testing operations for strings: ";;
print_string "testing the equality: ";;
let op0 = Eq(s1,s1);;
eval op0 emptyEnv;;
let op1 = Eq(s1, s0);;
eval op1 emptyEnv;;
print_string "testing < and >: ";;
let op2 = BiggerThan(s2, s1);;
eval op2 emptyEnv;;
let op3 = BiggerThan(s1, s2);;
eval op3 emptyEnv;;
let op4 = LessThan(s0,s2);;
eval op4 emptyEnv;;
let op5 = LessThan(s2,s0);;
eval op5 emptyEnv;;
let op6 = LessThan(s0,s0);;
eval op6 emptyEnv;;
print_string "testing the concatenation: ";;
let op7 = Concat(s1,s2);;
eval op7 emptyEnv;;
let op8 = Concat(op7,s3);;
eval op8 emptyEnv;;

print_string "testing operations for sets: ";;
print_string "testing the union: ";;
let op1 = Union(set9, Add(Add(set1,CstInt(189)), CstInt(22)));;
eval op1 emptyEnv;;
let op2 = Union(set3, set1);;
eval op2 emptyEnv;;
let op3 = Union(set6, set0);;
eval op3 emptyEnv;;
print_string "testing the intersection: ";;
let op4 = Intersection(set0,set6);;
eval op4 emptyEnv;;
let op5 = Intersection(set6,set0);;
eval op5 emptyEnv;;
let op6 = Intersection(set9, Add(Add(set10, i3), CstInt(22)));;
eval op6 emptyEnv;;
let op7 = Intersection(set8,set8);;
eval op7 emptyEnv;;
let op8 = Intersection(set9,set11);;
eval op8 emptyEnv;;
print_string "testing the difference: ";;
let op8 = Difference(set9,set11);;
eval op8 emptyEnv;;
let op9 = Difference(set6,set0);;
eval op9 emptyEnv;;
let op1 = Difference(set0,set6);;
eval op1 emptyEnv;;
print_string "testing the insertion: ";;
let op2 = Add(set7, s2);;
eval op2 emptyEnv;;
let op3 = Add(set9, CstInt(77));;
eval op3 emptyEnv;;
let op5 = Add(set0,f1);;
eval op5 emptyEnv;;
print_string "testing the removal: ";;
let op2 = Remove(set7, s3);;
eval op2 emptyEnv;;
let op3 = Remove(set9, i4);;
eval op3 emptyEnv;;
print_string "testing the minimum and maximum: ";;
let op0 = GetMin(set9);;
eval op0 emptyEnv;;
let op1 = GetMax(set9);;
eval op1 emptyEnv;;
let op2 = GetMin(set0);;
eval op2 emptyEnv;;
let op3 = GetMax(set0);;
eval op3 emptyEnv;;
let op4 = GetMin(set1);;
eval op4 emptyEnv;;
let op5 = GetMax(set1);;
eval op5 emptyEnv;;
print_string "testing IsEmpty: ";;
let op0 = IsEmpty(set0);;
eval op0 emptyEnv;;
let op1 = IsEmpty(set9);;
eval op1 emptyEnv;;
print_string "testing the head: ";;
let op4 = Head(set9);;
eval op4 emptyEnv;;
let op5 = Head(set8);;
eval op5 emptyEnv;;
print_string "testing the length: ";;
let op6 = Length(set7);;
eval op6 emptyEnv;;
let op7 = Length(set9);;
eval op7 emptyEnv;;
let op8 = Length(Remove(set7,s3));;
eval op8 emptyEnv;;
let op9 = Length(Empty(String)) ;;
eval op9 emptyEnv ;;
print_string "testing IsInside: ";;
let op0 = IsInside((Empty(String), s0));;
eval op0 emptyEnv;;
let op1 = IsInside(set9, i0);;
eval op1 emptyEnv;;
let op2 = IsInside(set9, CstInt(33));;
eval op2 emptyEnv;;
print_string "testing IsSubset: ";;
let op0 = IsSubset(set0, set0);;
eval op0 emptyEnv;;
let op3 = IsSubset(Empty(Int),set9);;
eval op3 emptyEnv;;
let op4 = IsSubset((Add(Empty(Int),CstInt 0)),set9);;
eval op4 emptyEnv;;
let op5 = IsSubset(set1, set9);;
eval op5 emptyEnv;;
let op6 = IsSubset(set9, set1);;
eval op6 emptyEnv;;

print_string "testing functions: ";;
(* tests with pred = even, with pred = odd  and finally with pred = neg*)
let pred_even=Fun("x",Ifthenelse(Eq(Mod(Den("x"),CstInt(2)),CstInt(0)),CstTrue,CstFalse));;
let pred_odd=Fun("x",Ifthenelse(Not(Eq(Mod(Den("x"),CstInt(2)),CstInt(0))),CstTrue,CstFalse));;
let pred_neg=Fun("x", Neg(Den("x")))

let make_even=Fun("x",Times(Den("x"),CstInt(2)));;
print_string "testing ForAll: ";;
let forall_even=ForAll(pred_even,set9);;
eval forall_even emptyEnv;;
let forall_odd=ForAll(pred_odd,set9);;
eval forall_odd emptyEnv;;
let forall_odd=ForAll(pred_odd,set1);;
eval forall_odd emptyEnv;;
print_string "testing Exists: ";; 
let exists_even=Exists(pred_even,set9);;
eval exists_even emptyEnv;;
let exists_odd=Exists(pred_odd,set9);;
eval exists_odd emptyEnv;;
let exists_even=Exists(pred_even,set1);;
eval exists_even emptyEnv;;
print_string "testing Filter: ";;
let filter_even=Filter(pred_even,set9);;
let filter_odd=Filter(pred_odd,set9);;

eval filter_even emptyEnv;;
eval filter_odd emptyEnv;;
print_string "testing Map: ";;
let map_make_even=Map(make_even,set9);;
eval map_make_even emptyEnv;;
let str = Of(String, [CstString("1:");CstString("2:");
                      CstString("3:");CstString("4:")]) ;;
let pred_concat = Fun("x", Concat(Den("x"), s1)) ;;
let map_concat= Map(pred_concat,str);;
eval map_concat emptyEnv;;
print_string "the mapping function can change types of the resulting set: ";;
let map_turn_to_one = Map(Fun("x", CstInt(1)), set7) ;;
eval map_turn_to_one emptyEnv ;;
let map_neg = Map(pred_neg, set9);;
eval map_neg emptyEnv ;;


print_string "--------------------------------------------------------------";;
print_string "testing failures: ";;
print_string "testing type mismatch: ";;
print_string "Set 4: ";;
let set4 = Of(Int,[f0;i1;i0;i4]);;
eval set4 emptyEnv;;
print_string "on the union: ";;                  
let op0 = Union(set0,set1);;
eval op0 emptyEnv;;
print_string "on the insertion: ";;                  
let op4 = Add(set7,b0);;
eval op4 emptyEnv;;
print_string "on IsInside: ";;                  
let op3 = IsInside(set9, b1);;
eval op3 emptyEnv;;
print_string "on IsSubset: ";;                  
let op1 = IsSubset(set9, set0);;
eval op1 emptyEnv;;
let op2 = IsSubset(set0, set9);;
eval op2 emptyEnv;;
print_string "on the Map: ";;                  
let map_failure=Map(make_even,set6);;
eval map_failure emptyEnv;;
print_string "testing for duplicate items: ";;
print_string "Set 5: ";;
let set5 = Of(Int,[i0;i1;i1;i2]);;
eval set5 emptyEnv;;
print_string "on the insertion: ";;                  
let op3 = Add(set9,i4);;
eval op3 emptyEnv;;
print_string "testing the division by zero: ";;
let op2 = Div(i1, i0);;
eval op2 emptyEnv;;
let op3 = Div(f1, f0);;
eval op3 emptyEnv;;
print_string "testing set consistency: ";;
print_string "on the insertion: ";;  
let op5 = Add(set9,Empty(Int));;
eval op5 emptyEnv;;
print_string "testing item presence: ";; 
print_string "on the removal: ";;   
let op1 = Remove(set0,f0);;
eval op1 emptyEnv;;   
let op3 = Remove(set7,s2);;
eval op3 emptyEnv;; 
print_string "testing if the set is empty: ";; 
print_string "on the head: ";;    
let op2 = Head(set3);;
eval op2 emptyEnv;; 
let op3 = Head(set0);;
eval op3 emptyEnv;;  
print_string "testing if the predicate is a boolean: ";;
print_string "on the ForAll: ";;   
let forall_failure = ForAll(pred_neg, set9);;
eval forall_failure emptyEnv;;
print_string "on the Exists: ";; 
let exists_failure = Exists(pred_neg, set9);;
eval exists_failure emptyEnv ;;     
print_string "on the Filter: ";;  
let filter_failure = Filter(pred_neg, set9);;
eval filter_failure emptyEnv ;;        
print_string "testing if the pred in f(pred,set) is actually a predicate: ";;
   print_string "on the ForAll: ";;   
let forall_failure = ForAll(CstInt(3), set9);;
eval forall_failure emptyEnv;;
print_string "on the Exists: ";; 
let exists_failure = Exists(CstInt(3), set9);;
eval exists_failure emptyEnv ;;     
print_string "on the Filter: ";;  
let filter_failure = Filter(CstInt(3), set9);;
eval filter_failure emptyEnv ;;  
print_string "on the Map: ";;  
let pred_map_failure = Map(CstInt(3),set9) ;;
eval pred_map_failure emptyEnv;;         
